# Licensed Materials - Property of IBM
# IBM Sterling Selling and Fulfillment Suite
# (C) Copyright IBM Corp. 2001, 2013 All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

## PROPERTY_FILE_NAME
## yifclient.properties.in (for initialization)
## yifclient.properties (for operations)
## PROPERTY_FILE_DESCRIPTION
## 

## PROPERTY_START
## PROPERTY_NAME: java.naming.factory.initial
## PROPERTY_GROUP: java.naming properties
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The java.naming properties are used when looking up the remote EJB interface.
## Note: The java.naming properties are not used for GIS, because it does not support EJB.
## Valid values:
## For WebLogic: 
## weblogic.jndi.WLInitialContextFactory
## For WebSphere:
## com.ibm.websphere.naming.WsnInitialContextFactory
## For JBoss:
## org.jboss.naming.remote.client.InitialContextFactory
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: java.naming.provider.url
## PROPERTY_GROUP: java.naming properties
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The java.naming properties are used when looking up the remote EJB interface.
## Note: The java.naming properties are not used for GIS, because it does not support EJB.
## Valid values:
## For WebLogic: t3://<ipaddress>:<port>
## For WebSphere: iiop://<ipAddress>:<port>
## For JBoss: jnp://<ipAddress>:<port>
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_GROUP: java.naming properties
## PROPERTY_NAME: java.naming.security.principal
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The java.naming properties are used when looking up the remote EJB interface.
## Note: The java.naming properties are not used for GIS, because it does not support EJB.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: java.naming.security.credentials
## PROPERTY_GROUP: java.naming properties
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The java.naming properties are used when looking up the remote EJB interface.
## Note: The java.naming properties are not used for GIS, because it does not support EJB.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: java.naming.referral
## PROPERTY_GROUP: java.naming properties
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The java.naming properties are used when looking up the remote EJB interface.
## Note: The java.naming properties are not used for GIS, because it does not support EJB.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: java.naming.security.protocol
## PROPERTY_GROUP: java.naming properties
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The java.naming properties are used when looking up the remote EJB interface.
## Note: The java.naming properties are not used for GIS, because it does not support EJB.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.apifactory.protocol
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Valid values: 
## HTTP
## HTTPS
## EJB (For GIS,  the value cannot be EJB.)
## LOCAL
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.url
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## URL of the remote InteropHttpServlet to use when making an API call over HTTP or HTTPS
## Format: http://0e9990fdc85e:11000/admin/interop/InteropHttpServlet
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.mime.boundary
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## HTTP mime boundary for use in sending and receiving blob data.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: javax.net.ssl.keyStore
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set this property and javax.net.ssl.keyStorePassword if you are using HTTPS.
## Set the location of the key store file if you are using client side digital certificates.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: javax.net.ssl.keyStorePassword
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set this property and javax.net.ssl.keyStore if you are using HTTPS.
## Set the location of the key store file if you are using client side digital certificates.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: javax.net.ssl.trustStore
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set this property and javax.net.ssl.trustStorePassword for server certificate authentication.
## The trust store is the location of the file where the server certificate root was imported.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: javax.net.ssl.trustStorePassword
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set this property and javax.net.ssl.trustStore for server certificate authentication.
## The trust store is the location of the file where the server certificate root was imported.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.userid
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set this property and yif.httpapi.password to use basic authentication over HTTP or HTTPS.
## UserId for basic authentication over HTTP or HTTPS
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.password
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set this property and yif.httpapi.userid to use basic authentication over HTTP or HTTPS.
## Password for basic authentication over HTTP or HTTPS
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.disableKeyStore
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Set to disable selective aspects of HTTPS.
## Disable client certificates
## Valid values: 
## true : (default) 
## false : 
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.disableTrustStore
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Disable verification of server certificates
## Valid values: 
## true : (default) 
## false : 
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.disableHostnameVerification
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Disable verification of the remote server name when using HTTPS
## Valid values: 
## true : (default) 
## false : 
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.urlStreamHandler
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Set to use a custom URLStreamHandler. Depending on configuration,
## this may be required when making outbound HTTPS requests from a WebLogic server.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.useClientProperties
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Send client properties to the server. If true then the server will
## receive a copy of the ClientProperties set on the YFSEnvironment.
## To ensure proper operation, all keys and values of this Map must be
## Strings.
## Valid values: 
## true : Send ClientProperties to the server.
## false : (default) Do not send ClientProperties.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.connectTimeout
## PROPERTY_TYPE: Integer
## PROPERTY_DESCRIPTION
## Number of milliseconds to set as the HTTP connect timeout, used when
## establishing a link to the remote server. A value of zero means an
## infinite timeout. Negative values are ignored, resulting in the default
## behavior of the underlying HTTP implementation.
## If this value is not specified, the default value is -1 (and thus ignored)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yif.httpapi.readTimeout
## PROPERTY_TYPE: Integer
## PROPERTY_DESCRIPTION
## Number of milliseconds to set as the HTTP read timeout, used when
## reading the response after a connection has been established. A value of
## zero means an infinite timeout. Negative values are ignored, resulting in
## the default behavior of the underlying HTTP implementation.
## If this value is not specified, the default value is -1 (and thus ignored)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: file.encoding
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## If international charset is used and HTTP is the specified as the transport in
## yif.apifactory.protocol for api invocation, the following system 
## property should be set for the client jvm.
## Example java -Dfile.encoding=UTF-8 <clientClass being invoked>.
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yfs.api.<apiname>.version
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Must be set for each api that has to be
## invoked in a backward compatibility mode.  
## Valid values: 
## ver32 
## ver40  
## ver45
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yfs.propertyencrypter.class
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
##  This class will be used for encrypting and decrypting properties.
##  Refer to the javadocs for the YCPEncrypter interface for information about how to write your own property encrypter class
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: yfs.context.namespace
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## (For property value, see PROPERTY_VALUE_ALL section at end of file) 
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: YPM_CATALOG_EP
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
##===============================================================================================================
## Configure the endpoint properties enables Pricing modular service to request data from external catalog system.
## There are two key properties: Connection protocol and Endpoint URL.
## The connection type can be either of HTTP/HTTPS depending if SSL authentication is required
## The endpoint URL should point to application server host location 
## Additional the web.userID/web.password is the http authentication credential for the external server to 
## established a secured connection.
## The ypm.catalog.app.userid is the catalog application user for external service handling.
## By default, if the properties are not set, local Catalog server will be used.
##================================================================================================================
## endpoint.YPM_CATALOG_EP.yif.apifactory.protocol=<HTTP/HTTPS>
## endpoint.YPM_CATALOG_EP.yif.httpapi.url=<http/https>://<host>:<port>/smcfs/interop/AuthorizationOnlyApiServlet
## ypm.catalog.web.userid=<UserID for the target server>
## ypm.catalog.web.password=<Password for the target server>
## ypm.catalog.app.userid=<CatalogUser>
## PROPERTY_END

## PROPERTY_VALUE_ALL

#---------------------------------------------------------------------------
# The properties associated with JNDI for performing an EJB api call are here
#-----------------------------------------------------------------------------
#for WebLogic
#java.naming.factory.initial=weblogic.jndi.WLInitialContextFactory
#java.naming.provider.url=t3://<ipaddress>:<port>

#for WebSphere
#java.naming.factory.initial=com.ibm.websphere.naming.WsnInitialContextFactory
#java.naming.provider.url=iiop://<ipAddress>:<port>

#for GIS,  the naming properties are not relevant since it does not support EJB.
#java.naming.factory.initial=
#java.naming.provider.url=


#java.naming.security.principal=
#java.naming.security.credentials=
#java.naming.referral=
#java.naming.security.protocol=

#This value has to be one of HTTP, HTTPS, EJB or LOCAL (For GIS,  the value cannot be EJB.)
yif.apifactory.protocol=LOCAL

yif.httpapi.url=http://0e9990fdc85e:11000/admin/interop/InteropHttpServlet
yif.mime.boundary=JJKHASDksks9485978Ksdamma9037


#Set the following properties if you are using HTTPS
#Set the location of the key store file, if you are using client side digital certificates
#javax.net.ssl.keyStore=
#javax.net.ssl.keyStorePassword=
#The following two properties should be set for server certificate authentication
#The trust store is the location of the file where the server certificate root was imported
#javax.net.ssl.trustStore=
#javax.net.ssl.trustStorePassword=

#Set the following userid and password to use basic authentication over HTTP or HTTPS
#UserId for basic authentication over HTTP or HTTPS
#yif.httpapi.userid=
#Password for basic authentication over HTTP or HTTPS
#yif.httpapi.password=

#Set the following to disable selective aspects of HTTPS.
#Disable client certificates
yif.httpapi.disableKeyStore=true
#Disable verification of server certificates
yif.httpapi.disableTrustStore=true
#Disable verification of the remote server name when using HTTPS
yif.httpapi.disableHostnameVerification=true

#Set the following to use a custom URLStreamHandler. Depending on configuration,
#this may be required when making outbound HTTPS requests from a WebLogic server.
#yif.httpapi.urlStreamHandler=sun.net.www.protocol.https.Handler

#Set the following to send the ClientProperties to the server when using HTTP and HTTPS.
#These properties are set on the YFSEnvionment through the ClientVersionSupport interface.
#yif.httpapi.useClientProperties=true

#If international charset is used and HTTP is the specified as the transport in
#yif.apifactory.protocol for api invocation, the following system 
#property should be set for the client jvm.
#	file.encoding=UTF-8
#Example java -Dfile.encoding=UTF-8 <clientClass being invoked>.

#The following property has to be set for each api that has to be
#invoked in a backward compatibility mode. 
#The valid values for this property are ver32, ver40, ver45
#yfs.api.<apiname>.version= 

# This class will be used for encrypting and decrypting properties.
# Refer to the javadocs for the YCPEncrypter interface for information about how to write your own property encrypter class
#yfs.propertyencrypter.class=

#If yfs.relogin is true, the client will keep track of login calls, and attempt
#to automatically re-login if the user token times out. Note this internally
#requires keeping a copy of the user and password information in local client
#memory.
#The default value is false, which prevents this behavior.
#yfs.relogin=false


