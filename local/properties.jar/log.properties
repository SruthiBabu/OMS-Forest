# Licensed Materials - Property of IBM
# IBM Sterling Order Management (5725-D10), IBM Order Management (5737-D18)
# (C) Copyright IBM Corp. 2001, 2018 All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

## PROPERTY_FILE_DETAIL_START
## PROPERTY_FILE_NAME: log.properties
## PROPERTY_IN_FILE_NAME: log.properties.in
## PROPERTY_FILE_DESCRIPTION
## Sets of properties required to define a logger that is used to log information to a file.
## This file should not be edited. Override property settings, if needed, using the 
## customer_overrides.properties file. 
## The following list shows the different loggers (log file name in parentheses).  Use these logger 
## names in the property names. For example, the logclass property for archivelogger is named 
## archivelogger.logclass. 
## * aftroutinglogger (aftrouting.log): Logger for AFT Routing
## * alerterlogger (alerterlogger.log): Alerter Specific Log
## * approval (approval.log)
## * archivelogger (archive.log) 
## * AuthenticationLogger (Authentication.log) 
## * bizIntel (bizIntel.log): Business Intelligence
## * bologger (businessobject.log): Logger for the Business Objects 
## * cccinteroplogger (cccinterop.log): CCCInterop Logger
## * cdinteropcdjavalogger (cdinterop_cdjava.log): CDInterop CDJava Logger
## * cdinteroplogger (cdinterop.log): CDInterop Logger
## * cdsplogger (cdsp.log): CDSP Adapter Logger
## * ceulogger (ceuinterop.log): CEU Server Adapter Logger
## * common3splogger (common3splogger.log): Common 3SP Logger
## * corbadapter (corbadapter.log)  
## * cryptologger (crypto.log): Crypto Logger
## * csp2ftplogger (cspftp.log): CSP2 FTP Adapter Logger
## * csp2httplogger (csphttp.log): CSP2 HTTP Adapter Logger
## * csplogger (secureproxy.log): CSP2 Logger
## * datastore (datastore.log)
## * deletelogger (delete.log)
## * ebXMLlogger (ebXML.log)
## * EDIINTLogger (EDIINT.log) 
## * edilogger (edi.log): Logger for EDI
## * embeddedEnginelogger (embeddedEngine.log)
## * event (event.log)
## * ftplogger (ftp.log): FTP Logger
## * httpclientlogger (httpclient.log): Logger for the HTTP Client Adapter
## * httplogger (http.log): Logger for the HTTP Server Adapter
## * jbosslogger (jboss_exe.log)
## * jettylogger (jetty.log) 
## * lifecycleLogger (lifecycle.log): Lifecycle Logger
## * mailboxlogger (mailbox.log):  Mailbox Logger
## * neo (mgmtdash.log)
## * noapplogger (noapp.log) 
## * OdetteFTPlogger (OdetteFTP.log): Logger for Odette FTP Adapter
## * oftplogger (oftp.log): Logger for OFTP Adapter
## * opslogger (ops_exe.log)
## * pipelinelogger (pipeline.log)
## * psftpclientlogger (ftpclient.log): PS FTP Client Adapter Logger
## * PSLogger (Perimeter.log): Perimeter Service Logger
## * purgelogger (purge.log) 
## * resourcemonitorlogger (resourcemonitor.log)
## * rnlogger (rnif.log)
## * saplogger (sap.log) : SAP Suite Adapter Logger
## * sapxilogger (sapxi.log): Logger for SAP XI Adapters
## * schedulelogger (schedule.log)
## * schedulemonitorlogger (schedulemonitor.log
## * sclogger (servicesctl.log)
## * SecurityLogger (Security.log) 
## * sftpclientlogger (sftpclient.log): SFTP Client Adapter Logger
## * sftpserverlogger (sftpserver.log): SFTP Server Adapter Logger
## * silogger (si_exe.log)
## * sqllogger (sql.log)
## * swiftnetlogger (swiftnet.log): Logger for the SwiftNet
## * SyncEngineLogger (SyncEngine.log)
## * systemlogger (system.log) : System log
## * tracking (tracking.log)
## * txlogger (tx.log): Logger for TRANSLATION
## * txtracelogger (txtrace.log): Translator Trace Logger
## * ui_perf_logger (ui_performance.log) : Page Performance in User Interface
## * uilogger (ui.log)
## * visibilitylogger (visibility.log): Logger for DMI Visibility
## * webdavlogger (webdav.log): WebDAV Logger
## * webxlogger (webx.log): Web Extension Logger
## * wfexception_logger (wfexception.log) 
## * wflogger (wf.log) 
## * wfstatistics (wfstatistics.log)
## * wsmqSuiteLogger (WebSphereMQSuite.log): WebSphere MQ Suite Logger
## * wsrmlogger (wsrm.log): Logger for the WS-Reliability Routing
## * wsseclogger (wssec.log):  Logger for the WS-Security 
## PROPERTY_FILE_DETAIL_END

## DATABASE_SUPPORT: N

## PROPERTY_START
## PROPERTY_NAME: log4jConfigFile 
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The location of the log configuration file is given by this property.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: newloggers                                   
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Enables the addition of a new logs method. 
## Valid values:
## true : (default) Enable the addition of a new logs method. 
## false : Do not enable the addition of a new logs method. 
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: defaultlog                                   
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Default system log.
## Example: systemlogger 
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: enableSQLMessages		             
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Enables detailed DB specific messages if available.
## Valid values:
## true : (default) Enable detailed DB specific messages if available.
## false : Do not enable detailed DB specific messages if available.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_NAME: [logger].logclass                   	 
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The main logger class (with complete package info) that will handle the logging is given by this property.
## Optional.
## Example: systemlogger.logclass=com.sterlingcommerce.woodstock.util.frame.log.Log4jLogger
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].logfilename                     
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Name and directory path of log file.
## Example: /opt/SSFS_9.5/runtime/logs/system.log 
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].rotatelogs                      
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Indicates whether to rotate the log after it has reached its maximum size.  If this
## flag is set to false, the [logger].maxlogsize and the [logger].maxnumlogs properties
## will be ignored and logger will continue to write in just one log file.  Set this flag to
## true to activate the [logger].maxlogsize and the [logger].maxnumlogs properties.
## Valid values:
## true : (default) Rotate log after it has reached its maximum size.
## false : Do not rotate log after it has reached its maximum size.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].maxlogsize                      
## PROPERTY_TYPE: Integer
## PROPERTY_DESCRIPTION
## Maximum number of write operations after which the log messages will be logged in a new
## file.
## Example: 100000 
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].maxnumlogs                      
## PROPERTY_TYPE: Integer
## PROPERTY_DESCRIPTION
## Maximum number of log files after which the oldest log file should be deleted.  If the value
## of this flag is set to 10, the 11th log file is created and the first log file will be 
## removed.
## Example: 10 
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].loglevel                        
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Indicates how much information to log.
## Valid values (in order of severity):
## NONE : Log nothing.
## CRITICAL : Log critical errors only.
## ERROR : Log errors only.
## WARN : Log errors and warnings.
## INFO : Log INFO and more severe.
## TIMING : Log errors, warnings, timing messages. 
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].displayname                     
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Display name for the logger.
## Example: Log.SystemLog
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].showsource	                     
## PROPERTY_TYPE: Boolean
## PROPERTY_DESCRIPTION
## Indicates whether to show the Java class that originated an error message.
## Note: This can have a dramatic impact on performance and log volume, so it should only be used 
## to diagnose problems.
## Valid values:
## true : Show the Java class that originated an error message.
## false : (default) Do not show the Java class that originated an error message.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].sysout                          
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The sysout Log file name to associate with the system logger.
## Example: /opt/SSFS_9.5/runtime/logs/noapp_exe.log
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].logkey                    
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## The logkey is used to pass the logger name to any logging framework used which can be used in the logs.
## Optional.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].UILevels
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Levels available on the UI.
## Used with PSLogger.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].UILevelNames
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Internationalization tags.
## Used with PSLogger.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: [logger].filenameformat
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Provides option to change log file names
## Valid values:
## count : number logs in the same manner provided by Log4j's RollingFileAppender like for file 'sci.log', No suffix is the current log file, .1 is the previous log ## file, .2  is the one before that, and so on. The existing maxnumlogs  property is still used to provide a maximum number of log files. In this mode the old logs have a numeric suffix indicating how old they are. Like
## sci.log
## sci.log.1
## sci.log.2
## sci.log.3
## date : (default) file name will be <FILE_NAME>.<TIMESTAMP>
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: appender. [pattern].pattern
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Provides option to change log file names.
## The following list shows the different appender patterns.
## If defined, the appender pattern will override the default
## conversion pattern defined in the log4jconfig.xml file
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: appender. default.pattern
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Provides option to change log file names.
## Indicates the default appender pattern to be used if one or more
## of the above mentioned appender patterns are not defined.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: pattern
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Provides option to change log file names.
## Indicates the default pattern to be used if the default appender pattern is not defined.
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_START
## PROPERTY_NAME: log4j.configuration.fragment.*
## PROPERTY_TYPE: String
## PROPERTY_DESCRIPTION
## Provides option to add to or extend log4j configuration provided in log4jconfig.xml file.
## Indicates the xml file containing log4j configuration. Applications can specify their xml file
## by using a unique suffix after fragment. e,g, log4j.configuration.fragment.1=<path to xml file>
## (For property value, see PROPERTY_VALUE_ALL section at end of file)
## PROPERTY_END

## PROPERTY_VALUE_ALL


newloggers                                   = true
defaultlog                                   = systemlogger
enableSQLMessages		             = true

systemlogger.logfilename                     = /opt/SSFS_9.5/runtime/logs/system.log
systemlogger.rotatelogs                      = true
systemlogger.maxlogsize                      = 100000
systemlogger.maxnumlogs                      = 10
systemlogger.loglevel                        = ERROR
systemlogger.displayname                     = Log.SystemLog
systemlogger.showsource	                     = false
systemlogger.filenameformat		     = date
systemlogger.sysout                          = /opt/SSFS_9.5/runtime/logs/noapp.log

SecurityLogger.logfilename               = /opt/SSFS_9.5/runtime/logs/Security.log
SecurityLogger.logkey                    = SecurityLogger
SecurityLogger.rotatelogs                = true
SecurityLogger.maxlogsize                = 1000
SecurityLogger.maxnumlogs                          = 10
SecurityLogger.loglevel                  = ERROR
SecurityLogger.displayname               = Log.Security
SecurityLogger.showsource	         = false
SecurityLogger.filenameformat		 = date

# include additional loggers (from clumps, etc.)
# because wildcards are not possible each additional file should be included by includeifexists. However, all ext files following the convention <property_file_name>_*_ext are automatically read in by Manager.java. The following entries below do not follow this convention and are therefore being included explicitly.



## The following list shows the different appender patterns. 
## If defined, the appender pattern will override the default 
##conversion pattern defined in the log4jconfig.xml file.
#appender.ALL.pattern=<pattern>
#appender.CONSOLE.pattern=<pattern>
#appender.AGENTLOG.pattern=<pattern>
#appender.SECURITYLOG.pattern=<pattern>
#appender.LOGINCLIENTIP.pattern=<pattern>
#appender.PROPMGR.pattern=PROPMGR<pattern>

## Indicates the default appender pattern to be used if one or more 
## above mentioned appender patterns are not defined.
#appender.default.pattern=<pattern>

## Indicates the default pattern to be used if the default appender pattern is not defined.
#pattern=<pattern>
